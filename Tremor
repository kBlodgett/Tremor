/**
 * class Tremor: This classs is to help determine what a tremor is. these objects will be reviewed again
 * in the other classes labeled lowintense, medintense, and high intense to determine just how intense a 
 * tremor is.
 * 
 * @author Kirjsten Blodgett
 * @version 1.0
 * email: catsanddogskb@hotmail.com
 */
import java.util.*;
public class Tremor
{
    // instance variables - replace the example below with your own
    private List<DataPerMin>  dataPerMinArray = new ArrayList<DataPerMin>();
    private List<DataPerMin>  duringTrems = new ArrayList<DataPerMin>();
    private List<DataPerMin>  trems = new ArrayList<DataPerMin>();
    private List<DataPerMin>  lowIntense = new ArrayList<DataPerMin>();
    private List<DataPerMin>  highIntense = new ArrayList<DataPerMin>();
    private List<DataPerMin>  medIntense = new ArrayList<DataPerMin>();
    //private List<DataPerMin> mins = new ArrayList<DataPerMin>();
    private String timeStart, timeEnd;
    private int HR=0; // lowestHR = 100, highestHR = 0;
    private double vec=0;
    /**
     * Constructor for objects of class Tremor
     */
    public Tremor(List dataPerMin)
    {
        dataPerMinArray = dataPerMin;
    }

    /**
     * Determines tremor through heart rate and vec-mag intensity
     * 
     */
    public void categorize()
    {

        for(int i = 0; dataPerMinArray.size() > i; i++)
        {
            DataPerMin dataPerMin = (DataPerMin) dataPerMinArray.get(i);
            if(dataPerMin.HR() > 100)
            {
                timeEnd = dataPerMin.time();
                if(dataPerMin.HR() > HR)
                {
                    HR = dataPerMin.HR();
                }
                if(dataPerMin.vec() > vec)
                {
                    vec = dataPerMin.vec();
                }
            }
            //labeling the intensity of the tremor recorded. Making it into a seperate tremor object and adding to tremor array
           if((dataPerMin.HR() > 100) && (HR !=0) && (vec != 0))
           {
               if(dataPerMin.vec() >= 8000)
               {
                   DataPerMin highTremor= new DataPerMin(dataPerMin.HR(), dataPerMin.time(), dataPerMin.vec());
                   highIntense.add(highTremor);
               }else if((dataPerMin.vec() >= 6000) &&(dataPerMin.vec() < 8000))
               {
                   DataPerMin medTremor= new DataPerMin(dataPerMin.HR(), dataPerMin.time(), dataPerMin.vec());
                   medIntense.add(medTremor);
               }else if((dataPerMin.vec() > 3500) && (dataPerMin.vec() < 6000))
               { 
                 DataPerMin lowTremor= new DataPerMin(dataPerMin.HR(), dataPerMin.time(), dataPerMin.vec());
                 lowIntense.add(lowTremor);  
               }
               
               HR = 0;
               timeEnd = null;
               vec = 0;
           }
        }
    }
    
    /**
     * prints mean of HR
     */
    public void HRMean()
    {   int hr=0;
        int count=0;
        for(int i=0; dataPerMinArray.size() > i ; i++ )
        {
            DataPerMin dataPerMin = (DataPerMin) dataPerMinArray.get(i);
            if(dataPerMin.HR() > 100)
            {
                hr += dataPerMin.HR();
                count++;
            }
        }
        if(hr != 0)
        {hr = hr/count;}
        System.out.println("");
        System.out.println("Mean:");
        System.out.println("HR - " + hr);
    }
    
    /**
     * prints mean of Vector-Magnitude
     */
    public void vecMean()
    {   
        double mean=0;
        int count=0;
        for(int i=0; dataPerMinArray.size() > i ; i++ )
        {
            DataPerMin dataPerMin = (DataPerMin) dataPerMinArray.get(i);
            if(dataPerMin.vec() > 3500)
            {
                mean += dataPerMin.vec();
                count++;
            }
        }
        if(mean !=0)
        {mean = mean/count;}
        System.out.println("Vector Magnitude - " + mean);
    }
    
    /**
     * calculates when a tremor begins and ends. Puts the data that falls during the tremor is put in a seperate array.
     * then that array is the placed into another array
     */
    public void mins()
    {
        List<DataPerMin> mins = new ArrayList<DataPerMin>();
        int count = 0;
        int tremCount = 0;
        System.out.println(" ");
        System.out.println("Tremors");
        for(int i =0; dataPerMinArray.size()>i; i++)
        {
            if(((DataPerMin)dataPerMinArray.get(i)).HR() < 110)
            {
                //make array to hold data for during tremors
                if((dataPerMinArray.size() > (i+1))&&(((DataPerMin)dataPerMinArray.get(i+1)).HR() > 110))
                {
                    //mins.add((DataPerMin)dataPerMinArray.get(i));
                    duringTrems.add((DataPerMin)dataPerMinArray.get(i));
                    count++;
                }
            }
            
            if(((DataPerMin)dataPerMinArray.get(i)).HR() > 110)
            {
                if((((DataPerMin)dataPerMinArray.get(i+1)).HR() < 110)&&(((DataPerMin)dataPerMinArray.get(i+1)).HR() > 60)) 
                {
                    //mins.add((DataPerMin)dataPerMinArray.get(i));
                    DataPerMin temp = dataPerMinArray.get(i);
                    String time = temp.time();
                    evaluate(duringTrems, time);
                    duringTrems.clear();
                    tremCount++;
                }
            }
        }
        
        System.out.println("Total Amount: " + tremCount);
        /**
        System.out.println(" ");
        System.out.println("Min Times");
        for(int x = 0; mins.size() > x; x++)
        {
           System.out.println(((DataPerMin)mins.get(x)).time());
        }
        mins=null;
        */
    }
    
    /**
     * evaluates duringTrmor to give length, mean, and highest point during tremor
     */
    public void evaluate(List array, String time)
    {
        int maxHR=0;
        double maxVec=0;
        DataPerMin high;
        //find the max heart rate during tremor and the max vector magnitude during tremor
        for(int i = 0; array.size() > i; i++)
        {
            high = (DataPerMin) array.get(i);
            if(high.HR() > HR)
            {HR = high.HR();}
            if(high.vec() > vec)
            {vec = high.vec();}
        }
        
            System.out.println("");
            System.out.println("Time: " + time);
            System.out.println("Max HR: " + maxHR);
            System.out.println("Max Vactor Magnitude: " + maxVec);
            System.out.println("Length : " + array.size() );

        
        
    }
    
    /**
     * counts tremors
     *
    public void countMins()
    {
       List<DataPerMin> mins = new ArrayList<DataPerMin>();
       int count = 0;
       int val = 0;
       int min = 0;
       int i = 0;
       val = dataPerMinArray.get(i).HR();
       min = val;
       while(i < dataPerMinArray.size())
       {
           i++;
           val = dataPerMinArray.get(i).HR();
           if(val < min)
           {
               min = val;
               mins.add((DataPerMin)(dataPerMinArray.get(i)));
            }
           
        }
        
       for(int x = 0; mins.size() > x; x++)
       {
           System.out.println("Min Times");
           System.out.println(((DataPerMin)mins.get(i)).time());
        }
    }
    

    
    /**
    public static boolean isIncreasing(List<DataPerMin> arr)
    {
        
        
        boolean z = false;

        for(int i=0; i<arr.length;i++)
        {
            if(((DataPerMin)arr.get(i)).HR()<((DataPerMin)arr.get(i+1)).HR())
            {
                z = true;
            }
        }

        return z;
    }
    */
    
    /**
     * returns list of low intensity tremors
     */
    public List lowIntense()
    {
        return lowIntense;
    }
    
    /**
     * returns list of medium intensity tremors
     */
    public List medIntense()
    {
        return medIntense;
    }
    
    /**
     * returns list of high intensity tremors
     */
    public List highIntense()
    {
        return highIntense;
    }
    
    

}

/**
 *          if((analyzeObject.HR() > 160)&& (analyzeObject.vec() > 8000)
            {
                
            }
            
            if((analyzeObject.HR() > 140)&& (analyzeObject.vec() > 6000)
            {
                
            }
            
            if((analyzeObject.HR() > 100)&& (analyzeObject.vec() > 4500)
            { 
                
            }
            
 * 
 */
